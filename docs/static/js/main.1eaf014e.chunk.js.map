{"version":3,"sources":["images/rick_morty_logo.png","components/Header.js","components/FilterByName.js","components/FilterBySpecies.js","components/Filters.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","components/RouteNotFound.js","components/Footer.js","services/api.js","services/localStorage.js","components/App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","imgHeader","alt","title","FilterByName","props","type","name","id","value","filterName","placeholder","onChange","ev","handleFilter","target","key","FilterBySpecies","Filters","onClick","preventDefault","filterSpecies","CharacterCard","humanIcon","alienIcon","to","characterData","picture","species","CharacterList","characterElement","characters","length","map","character","CharacterDetail","deadIcon","aliveIcon","missingIcon","status","origin","episode","RouteNotFound","Footer","getApiData","fetch","then","response","json","data","cleanData","results","image","sort","a","b","objToExport","get","defaultData","localStorage","getItem","JSON","parse","set","setItem","stringify","App","useState","localSt","setCharacters","setFilterName","setFilterSpecies","useEffect","filteredCharacters","filter","toLowerCase","includes","exact","path","render","routerCharacterId","match","params","characterId","foundCharacter","find","parseInt","undefined","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.1eaf014e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/rick_morty_logo.de13d484.png\";","import imgHeader from \"../images/rick_morty_logo.png\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1 className=\"header-text\">Rick and Morty</h1>\r\n      <img\r\n        className=\"header-img\"\r\n        src={imgHeader}\r\n        alt=\"Rick and Morty\"\r\n        title=\"Rick and Morty\"\r\n      />\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","const FilterByName = (props) => {\r\n  const handleName = (ev) => {\r\n    //función para pasar los datos limpios a App\r\n    props.handleFilter({\r\n      value: ev.target.value,\r\n      key: \"name\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"form__input name\"\r\n      type=\"text\"\r\n      name=\"name\"\r\n      id=\"name\"\r\n      value={props.filterName}\r\n      placeholder=\"Character's name\"\r\n      onChange={handleName}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FilterByName;\r\n","const FilterBySpecies = (props) => {\r\n  const handleSpecies = (ev) => {\r\n    //función para pasar los datos limpios a App\r\n    props.handleFilter({\r\n      value: ev.target.value,\r\n      key: \"species\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <select\r\n        className=\"form__input species\"\r\n        name=\"species\"\r\n        id=\"species\"\r\n        onChange={handleSpecies}\r\n      >\r\n        <option value=\"\">Select species</option>\r\n        <option value=\"alien\">Alien</option>\r\n        <option value=\"human\">Human</option>\r\n      </select>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FilterBySpecies;\r\n","import FilterByName from \"./FilterByName\";\r\nimport FilterBySpecies from \"./FilterBySpecies\";\r\n\r\nconst Filters = (props) => {\r\n  const handleForm = (ev) => {\r\n    ev.preventDefault();\r\n  };\r\n  return (\r\n    <form className=\"main__form\" onClick={handleForm}>\r\n      <FilterByName\r\n        filterName={props.filterName}\r\n        handleFilter={props.handleFilter}\r\n      />\r\n      <FilterBySpecies\r\n        filterSpecies={props.filterSpecies}\r\n        handleFilter={props.handleFilter}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst CharacterCard = (props) => {\r\n  const humanIcon = <i className=\"fas fa-universal-access species-icon\"></i>;\r\n  const alienIcon = <i className=\"fab fa-reddit-alien species-icon\"></i>;\r\n\r\n  const speciesIcon = () => {\r\n    if (props.characterData.species === \"Alien\") {\r\n      return alienIcon;\r\n    } else if (props.characterData.species === \"Human\") {\r\n      return humanIcon;\r\n    }\r\n  };\r\n  return (\r\n    <Link to={`/character/${props.characterData.id}`}>\r\n      <article className=\"character__list-item\">\r\n        <img\r\n          className=\"character-pic\"\r\n          src={props.characterData.picture}\r\n          alt={props.characterData.name}\r\n        />\r\n\r\n        <h2 className=\"character-name\">{props.characterData.name}</h2>\r\n        <p className=\"character-species\">{speciesIcon()}</p>\r\n      </article>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default CharacterCard;\r\n","import CharacterCard from \"./CharacterCard\";\r\n\r\nconst CharacterList = (props) => {\r\n  let characterElement = \"\";\r\n\r\n  if (props.characters.length !== 0) {\r\n    characterElement = props.characters.map((character) => {\r\n      return (\r\n        <li className=\"character__list__item\" key={character.id}>\r\n          <CharacterCard characterData={character} />\r\n        </li>\r\n      );\r\n    });\r\n  } else {\r\n    characterElement = (\r\n      <>\r\n        <h2>Character not found</h2>\r\n      </>\r\n    );\r\n  }\r\n  return (\r\n    <section className=\"results-section\">\r\n      <ul className=\"character__list\">{characterElement}</ul>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CharacterList;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst CharacterDetail = (props) => {\r\n  const humanIcon = <i className=\"fas fa-universal-access species-icon\"></i>;\r\n  const alienIcon = <i className=\"fab fa-reddit-alien species-icon\"></i>;\r\n  const deadIcon = <i className=\"fas fa-skull status-icon\"></i>;\r\n  const aliveIcon = <i className=\"fas fa-smile status-icon\"></i>;\r\n  const missingIcon = <i className=\"fas fa-compass status-icon\"></i>;\r\n\r\n  const speciesIcon = () => {\r\n    if (props.character.species === \"Alien\") {\r\n      return alienIcon;\r\n    } else if (props.character.species === \"Human\") {\r\n      return humanIcon;\r\n    }\r\n  };\r\n\r\n  const statusIcon = () => {\r\n    if (props.character.status === \"Alive\") {\r\n      return aliveIcon;\r\n    } else if (props.character.status === \"Dead\") {\r\n      return deadIcon;\r\n    } else if (props.character.status === \"unknown\") {\r\n      return missingIcon;\r\n    }\r\n  };\r\n  return (\r\n    <main className=\"card-detail-container\">\r\n      <Link className=\"return-link\" to=\"/\">\r\n        Go back\r\n      </Link>\r\n      <div className=\"main-detail\">\r\n        <section className=\"mid-section-card-left\">\r\n          <img src={props.character.picture} alt=\"nombre\" />\r\n        </section>\r\n        <section className=\"mid-section-card-right\">\r\n          <h2 className=\"detail-title\">{props.character.name}</h2>\r\n          <ul className=\"list-detail\">\r\n            <li className=\"list-detail__item\">\r\n              Status:\r\n              {props.character.status} {statusIcon()}\r\n            </li>\r\n            <li className=\"list-detail__item\">\r\n              Species: {props.character.species} {speciesIcon()}\r\n            </li>\r\n            <li className=\"list-detail__item\">\r\n              Origin: {props.character.origin}\r\n            </li>\r\n            <li className=\"list-detail__item\">\r\n              Number of episodes: {props.character.episode}\r\n            </li>\r\n          </ul>\r\n        </section>\r\n      </div>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default CharacterDetail;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nconst RouteNotFound = () => {\r\n  return (\r\n    <>\r\n      <main className=\"not-found-main\">\r\n        <div className=\"not-found-background\"></div>\r\n        <Link className=\"return-link\" to=\"/\">\r\n          Try again\r\n        </Link>\r\n        <h2 className=\"not-found-text\">\r\n          Oups... Something didn't go as expected...\r\n        </h2>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RouteNotFound;\r\n","const Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <small className=\"footer__rights\">\r\n        <span className=\"rights__item\">&copy;2021</span>\r\n      </small>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","//limpieza data\r\n//tarjetas:\r\n//id\r\n//img\r\n//nombre\r\n//especie\r\n\r\n//detalle:\r\n//id -ya lo tengo\r\n//name -ya lo tengo\r\n//especie -ya lo tengo\r\n//estado\r\n//origen\r\n//episodios - me falta, necesito recorrer array\r\n\r\nconst getApiData = () => {\r\n  return fetch(\"https://rickandmortyapi.com/api/character\")\r\n    .then((response) => response.json())\r\n    .then((data) => {\r\n      const cleanData = data.results.map((character) => {\r\n        return {\r\n          name: character.name,\r\n          id: character.id,\r\n          picture: character.image,\r\n          species: character.species,\r\n          status: character.status,\r\n          origin: character.origin.name,\r\n          episode: character.episode.length,\r\n        };\r\n      });\r\n      cleanData.sort(function (a, b) {\r\n        if (a.name > b.name) {\r\n          return 1;\r\n        }\r\n        if (a.name < b.name) {\r\n          return -1;\r\n        }\r\n        // a must be equal to b\r\n        return 0;\r\n      });\r\n      return cleanData;\r\n    });\r\n};\r\n\r\nexport default getApiData;\r\n","const set = (key, value) => {\r\n  //tengo que asignar nuevo nombre y el elemento que quiero guardar\r\n  //función\r\n  localStorage.setItem(key, JSON.stringify(value));\r\n};\r\n\r\nconst get = (key, defaultData) => {\r\n  //solo recibe nombre que yo le he asignado\r\n  //función\r\n  const data = localStorage.getItem(key);\r\n  if (data === null) {\r\n    //condición\r\n    return defaultData; //defaultData equivale a un array vacío en app, función en la const charactersLocalStData\r\n  } else {\r\n    return JSON.parse(data);\r\n  }\r\n};\r\n\r\nconst objToExport = {\r\n  get: get,\r\n  set: set,\r\n};\r\nexport default objToExport;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\n//estilos\nimport \"../stylesheet/App.scss\";\nimport \"../stylesheet/reset.scss\";\n\n//estructura web\nimport Header from \"./Header\";\nimport Filters from \"./Filters\";\nimport CharacterList from \"./CharacterList\";\nimport CharacterDetail from \"./CharacterDetail\";\nimport RouteNotFound from \"./RouteNotFound\";\nimport Footer from \"./Footer\";\n\n//servicios\nimport getApiData from \"../services/api\";\nimport localSt from \"../services/localStorage\";\n\nconst App = () => {\n  //const charactersLocalStData = localSt.get(\"characters\", []); //aquí controlo cuándo recoger los datos del local con el get. Declaro en array vacío para que la función no me retorne undefined y se rompa cuando llamo a characters al principio\n\n  //estados\n\n  const [characters, setCharacters] = useState(localSt.get(\"characters\", [])); // estado de datos y llamo a localStorage para que recoja los datos de characters\n  const [filterName, setFilterName] = useState(localSt.get(\"filterName\", \"\"));\n\n  const [filterSpecies, setFilterSpecies] = useState(\n    localSt.get(\"filterSpecies\", \"\")\n  );\n\n  //effects\n\n  useEffect(() => {\n    //ejecuta cosas en el montaje\n    if (characters.length === 0) {\n      //si el array de personajes está vacío, llama a la API\n      getApiData().then((characterData) => {\n        setCharacters(characterData);\n      });\n    }\n  }, []); //parámetro que nos indica cuándo se debe ejecturar el use effect\n\n  useEffect(() => {\n    localSt.set(\"characters\", characters);\n  }, [characters]);\n\n  useEffect(() => {\n    localSt.set(\"name\", filterName);\n  }, [filterName]);\n\n  useEffect(() => {\n    localSt.set(\"species\", filterSpecies);\n  }, [filterSpecies]);\n\n  //event handlers\n\n  const handleFilter = (data) => {\n    //función general para todos los filtros\n\n    if (data.key === \"name\") {\n      setFilterName(data.value);\n    } else if (data.key === \"species\") {\n      setFilterSpecies(data.value);\n    }\n  };\n\n  //render - pintado\n\n  const filteredCharacters = characters\n    .filter((character) => {\n      return character.name.toLowerCase().includes(filterName.toLowerCase());\n    })\n    .filter((character) => {\n      if (filterSpecies === \"\") {\n        return true;\n      } else {\n        return character.species.toLowerCase() === filterSpecies;\n      }\n    });\n\n  const renderCharacterDetail = (props) => {\n    // renderear con rutas\n    const routerCharacterId = props.match.params.characterId;\n    const foundCharacter = characters.find((character) => {\n      return character.id === parseInt(routerCharacterId);\n    }); //parseInt(routerCharacterId)\n\n    if (foundCharacter !== undefined) {\n      //si no lo encuentra en el array\n      return <CharacterDetail character={foundCharacter} />;\n    } else {\n      return <RouteNotFound />;\n    }\n  };\n\n  return (\n    <>\n      <Header />\n      <Switch>\n        <Route exact path=\"/\">\n          <main className=\"main\">\n            <Filters\n              filterName={filterName}\n              filterSpecies={filterSpecies}\n              handleFilter={handleFilter}\n            />\n\n            <CharacterList characters={filteredCharacters} />\n          </main>\n        </Route>\n        <Route path=\"/character/:characterId\" render={renderCharacterDetail} />\n\n        <Route path=\"*\" component={RouteNotFound} />\n      </Switch>\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}